@startuml InitializationDiagram
|HOST|
start
floating note: Pink == parallel exec

partition Load_From_File {
    :img = new CImg(pathFile);
    :img = img.trasponse();
    :inputMatrix = new Matrix(img.vector, img.height, img.width); 
}

partition Std_Dev {
    :noiseVariance = img.variance_noise();
}
partition Img_To_Patches {
    while (collectedPatches < nPatches)
        :find Start End pixels for currPatch;
        :patchesHost.insertPixelsBetween(IdxStart, IdxEnd);
        :collectedPatches++;
    endwhile
    :noisePatches = new Matrix (patchesHost, patchSize, nPatches);
    |#AntiqueWhite|DEVICE|
    :noisePatches.copyOnDevice();
}

partition Init_Dict {
    :dictDevice = copy nAtoms from noisePatches;
    while (currAtom < nAtoms)
            :normalizeAtom(currAtom, l2_norm);
            :currAtom++;
    endwhile
    :dictionary = new Matrix(dictDevice, patchSize, nAtoms);
}
stop

@enduml