@startuml DenoiseDiagram

start
while (ksvdIter < maxKsvdIter)

    partition OMP {
        :norms = host_vector(patchesMatrix->n, 1);
        :residualVec = noisePatches;
        while(ompIter < maxOmpIter)
            partition CuBlasLib_Device_Parallel_Exec #LightGreen{
                :proj = SGEMM(dictionary, residualVec);
            }
            partition ThrustLib_Device_Parallel_Exec #LightSteelBlue{
                :absProj = transform (proj, ABSoperator);
            }
            :inputIdx = 0;
            while(inputIdx < nPatches)
                if(norms[inputIdx] > epsilon) then(yes)
                    :IndicesIter.add(inputIdx);
                    partition CuBlasLib_Device_Parallel_Exec #LightGreen{
                        :maxs[inputIdx] = ASYNC_INDEX_MAX(projABS[inputIdx][ ]);
                    }
                endif
                :inputIdx++;
            endwhile;
            partition Kernel_Device_Parallel_Exec #LightBlue{
                while( inputIdx : indicesIter)
                    :chosenAtomList[inputIdx][ ] = dict[maxs[inputIdx]][ ];
                endwhile;
            }
            partition CuSolverLib_Device_Parallel_Exec #LightYellow{
                :USV = GESVDA_STRIDED_BATCH(chosenAtomList);
            }
            partition CuBlasLib_Device_Parallel_Exec #LightGreen{
                :copListInverse = V x S^T^-1 x U "2x cublasSgemmStridedBatched";
            }
            
            partition Kernel_Device_Parallel_Exec #LightBlue{
                while( inputIdx : indicesIter)
                    :weightList[inputIdx][ ] = ASYNC_SGEMV(copListInverse[inputIdx], noisePatches[ ][ ]);
                    :tempVec[inputIdx][ ] = ASYNC_SGEMV(chosenAtomList[inputIdx],weightList[inputIdx][ ]);
                    :copy weightList into sparseCode (Attention to index);
                endwhile;
            }
            partition ThrustLib_Device_Parallel_Exec #LightSteelBlue{
                :residualVec = transform(noisePatches, tempVec, "Minus Point by Point");
            }

            partition CuBlasLib_Device_Parallel_Exec #LightGreen{
                while( inputIdx : indicesIter)
                    :norms[inputIdx] = ASYNC_l2_NORM(residualVec[inputIdx]);
                endwhile;
            }
        :ompIter++;
        endwhile;
    }

    partition UpdateDictionary {
        partition Kernel_Device_Parallel_Exec #LightBlue{
            while(currAtom < nAtoms)
                :relevantDataIndices[currAtom] = Patches Indices where sparseCode[currAtom][Idx] !=0;
                :relevantDataIndicesCounter[currAtom] = COUNT(relevantDataIndices[curAtom]);
            endwhile;
        }
        :relevantDataIndices.copyOnHost();
        :relevantDataIndicesCounter.copyOnHost();
        :maxRelevant = MAX(relevantDataIndicesCounter[ ]);
        :selectSparseCode = new device_vector(maxRelevant * sparseCode->m);
        partition Kernel_Device_Parallel_Exec #LightBlue{
            while(currAtom < nAtoms)
                :selectSparseCode = coeffs associted with relevantDataIndices[currAtom];
                :patch = 0;
                while(patch < relevantDataIndicesCounter)
                    :selectSparseCode[patch][currAtom] = 0;
                    :patchesSelected.add(patchIdx);
                    :patch++;
                endwhile;    
        endwhile;
        }
            partition CuBlasLib_Device_Parallel_Exec #LightGreen{
                :dx = sgemm(dictionary, selectSparseCode);
            }
            partition ThrustLib_Device_Parallel_Exec #LightSteelBlue{
                :E = transform(patches[{relevantDataIndices}], dx, "Minus Point by Point");
            }
            partition CuSolverLib_Device_Parallel_Exec #LightYellow{
                :USV = SVD_JACOBI(E);
            }
            partition ThrustLib_Device_Parallel_Exec #LightSteelBlue{
                :dict[currAtom] = U[0];
                :vCol = 0;
                while(patchIdx : patchesSelected)
                    :sparseCode[patchIdx][ ]= S[1] * V[vCol][ ] ;
                    :vCol++;
                endwhile;
            }
            :curAtom++;
    }
    :ksvdIter++;
endwhile;

partition FinalOMP {
    :sparseCode = as before;
}
stop

@enduml