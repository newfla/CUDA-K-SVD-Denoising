@startuml BuildImageDenoisedDiagram

start

partition DxS {
    partition CuBlasLib_Device_Parallel_Exec #LightGreen{
        :noisePatches = SGEMM(dictionary, sparseCode);
    }
    :noisePatches.copyOnHost();
}

partition RebuildAfirstImage {
    :img = new host_vector(imageDim, 0);
    while (currPixel < image_Dim)
        :currPatch = 0;
        while(currPatch < nPatches)
            if(currPixel in currPatch?) then (yes)
                :img[currPixel] += currPatchFindMatch[currPixel].value();
                :weightsPixel[currPixel]++;
            endif
            :currPatch++;
        endwhile
        :currPixel++;
    endwhile
     
}

partition FindLamba {
    partition ThrustLib_Host_Parallel_Exec #LightSteelBlue{
        :tempImg = weightedImage(img,pixelsWeight);
        :distance = Pixels distance Point by Point (originalImg, tempImg);
    }
   
    :lambda = abs(sqrt(l2Norm(temp) / (noiseVariance * imgDims)) -1);
}

partition BuildImage {
    partition ThrustLib_Host_Parallel_Exec #LightSteelBlue{
        :tempImg = transform(originalImg, lambda, "coffMult");
        :img = transform(tempImg, img, "Sum Point by Point");
        :tempImg = transform(weightList, lambda, "coffAdd");
        :img = transform(img, tempImg, "Divide Point by Point");
    }
}

partition SaveImage {
    :file = new Cimg(img, originalImg.height, originalImg.width);
    :file.transpose();
    :file.save(filePath);
}

stop


@enduml