@startuml diagrammaSVD

class Matrix{
    + int m
    + int n
    + int ld
    + double* matrix
    {static} + Matrix* randomMatrix (m,n,ld)

}

abstract class SvdEngine{
    
    {abstract} # init(Matrix*)
    {abstract} # vector<Matrix*> getOutputMatrices( )
    {abstract} # work( )
    {static} + SvdEngine factory (SvdEngineType)
}

abstract class SvdCudaEngine{

    # double* deviceA
    # double* deviceU
    # double* deviceS
    # double* deviceVT
    

    # {abstract} init(Matrix*)
    # {abstract} dvector<Matrix*> getOutputMatrices( )
}

enum SvdEngineType{
        CUSOLVERDNDGESVD
        MKL
        MAGMA
}

class CuSolverDnDgeSvdEngine{
    - copyToDevice( )
    - copyFromDevice( )
    # work( )
}

class TimeElapsed{
    + int getInitTime()
    + int getWorkingTime()
    + int getFinalizeTime()
    + int getTotalTime()
}

note bottom: Time in milliseconds

class SvdContainer{
    + SvdContainer(SvdEngine*)
    + setMatrix(Matrix*)
    + Matrix*[ ] getOutputMatrices( )
    + TimeElapsed* getTimeElapsed( )
}

SvdContainer ..>  Matrix : use
SvdContainer --> "1" SvdEngine
TimeElapsed "1" <- SvdContainer
SvdEngine -> "*" Matrix
SvdEngine <|-- SvdCudaEngine : extends
SvdCudaEngine <|-- CuSolverDnDgeSvdEngine : extends

hide SvdEngine fields
hide TimeElapsed fields
hide SvdContainer fields
hide CuSolverDnDgeSvdEngine fields
hide SvdEngineType methods

@enduml