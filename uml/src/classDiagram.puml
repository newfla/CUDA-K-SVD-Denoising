@startuml diagrammaSVD

package utilityLib{

    class Matrix{
        + int m
        + int n
        + int ld
        + host_vector* hostVector
        + device_vector* deviceVector
        
        + Matrix* cloneHost()
        + void copyOnDevice()
        + void copyOnHost()
        {static} + Matrix* randomMatrixHost(int m, int n, int ld)
    }

    class TimeElapsed{
        + int init
        + int working
        + int finalize
        + int getTotalTime()
    }

    note right: Time in milliseconds

    enum MatrixMultType{
            CUBLASS_MULT
    }

    abstract class MatrixMult{

        # float alfa
        # float BoundaryStereotypeFontName

        {abstract} # init()
        {abstract} # finalize()
        {abstract} + multiply()
        {abstract} + TimeElapsed* getTimeElapsed()
        {static} + MatrixMult* factory(MatrixMultType, Matrix*, Matrix* ,int , int)
    }

    class CuBlassMatrixMult{

        - cublasHandle_t handle
        - cublasOperation_t op
        - device_vector<float>* cVector

        # init()
        # finalize()
        + multiply()
    }

    MatrixMult --> "*" Matrix
    MatrixMult --> "1" TimeElapsed
    MatrixMult -> "1" MatrixMultType 
    CuBlassMatrixMult --|> MatrixMult : extends

    hide MatrixMultType methods 
}

package svdLib {

    abstract class SvdEngine{
        
        {abstract} # init(Matrix*)
        {abstract} # host_vector<Matrix*> getOutputMatrices()
        {abstract} # device_vector<Matrix*> getDeviceOutputMatrices()
        {abstract} # work( )
        {static} + SvdEngine* factory(SvdEngineType)
    }

    abstract class SvdCudaEngine{

        # float* deviceA
        # float* deviceU
        # float* deviceS
        # float* deviceVT
        # float* deviceWork
        # int lWork
        # int* deviceInfo
        # cusolverDnHandle_t cusolverH
        

        #  init(Matrix*)
        #  host_vector<Matrix*> getOutputMatrices()
        # device_vector<Matrix*> getDeviceOutputMatrices()
    }

    enum SvdEngineType{
            CUSOLVER_GESVD
            CUSOLVER_GESVDJ
    }

    class CuSolverGeSvd{

        - float* deviceRWork

        # init(Matrix*)
        # work( )
        # host_vector<Matrix*> getOutputMatrices()
        # device_vector<Matrix*> getDeviceOutputMatrices()
    }

    class CuSolverGeSvdJ{

        - float tolerance
        - int maxSweeps
        - int econ
        - gesvdjInfo_t gesvdjParams
        - cusolverEigMode_t jobZ

        - printStat()
        # init(Matrix*)
        # work( )
        # host_vector<Matrix*> getOutputMatrices()
        # device_vector<Matrix*> getDeviceOutputMatrices()
    }

    class SvdContainer{

        + SvdContainer(SvdEngine*)
        + setMatrix(Matrix*)
        + host_vector<Matrix*> getOutputMatrices()
        + TimeElapsed* getTimeElapsed()
    }

    'SvdContainer -->  "*" Matrix 
    SvdContainer --> "1" SvdEngine
    'TimeElapsed "1" <- SvdContainer
    'SvdEngine -> "*" Matrix
    SvdEngine -> "1" SvdEngineType
    SvdEngine <|-- SvdCudaEngine : extends
    SvdCudaEngine <|-- CuSolverGeSvdJ : extends
    SvdCudaEngine <|-- CuSolverGeSvd : extends

    hide SvdEngineType methods
    hide SvdContainer fields
    hide SvdEngine fields
}

package denoisingLib{

    enum DenoiserType{
            CUDA_K_GESVD
            CUDA_K_GESVDJ
    }

    abstract class Denoiser{

        - String inputFile
        - String outputFile
        - CImg<float>* inputImage

        {abstract} # bool loadImage()
        {abstract} # bool saveImage()
        {abstract} # bool internalDenoising()
        {abstract} + signed char denoising()
        + TimeElapsed* getTimeElapsed()
        {static} + Denoiser* factory (DenoiserType, String input, String output)
    }

    note top: denoising = 0 --> SUCCESS\n = - i --> FAILED during i-th phase 

    class CudaKSvdDenoiser{
        - int patchSquareDim
        - int slidingPatch
        - int atoms

        - void createPatch()
        - void initDictionary()
        # bool loadImage()
        # bool saveImage()
        # bool internalDenoising()
        + signed char denoising()
    }

    class BatchDenoiser{
        + host_vector<TimeElapsed*> getTimeElapsed() 
        + host_vector<signed char> seqBatchDenoising()
        {static} + BatchDenoiser* factory (DenoiserType type, String inputFolder, String outputFolder)
    }

    note top: j-th batchDenoising = same as denoising()\nfirst TimeElapsed = sum single exec time 


    'Denoiser --> "1" TimeElapsed
    'Denoiser --> "*" Matrix
    'Denoiser --> "*" SvdContainer
    CudaKSvdDenoiser -|> Denoiser : extends
    DenoiserType "1"<- CudaKSvdDenoiser
    'CudaKSvdDenoiser --> "*" Matrix
    BatchDenoiser --> "*" Denoiser
    'BatchDenoiser --> "*" TimeElapsed

    hide BatchDenoiser fields
    hide DenoiserType methods
}


@enduml