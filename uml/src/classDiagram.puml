@startuml diagrammaSVD

class Matrix{
    + int m
    + int n
    + int ld
    + float* matrix
    {static} + Matrix* randomMatrix (int m, int n, int ld)

}

abstract class SvdEngine{
    
    {abstract} # init(Matrix*)
    {abstract} # vector<Matrix*> getOutputMatrices( )
    {abstract} # work( )
    {static} + SvdEngine factory (SvdEngineType)
}

abstract class SvdCudaEngine{

    # float* deviceA
    # float* deviceU
    # float* deviceS
    # float* deviceVT
    # float* deviceWork
    # int lWork;
    # int *deviceInfo;
    # cusolverDnHandle_t cusolverH
    

    #  init(Matrix*)
    #  vector<Matrix*> getOutputMatrices( )
}

enum SvdEngineType{
        CUSOLVER_GESVD
        CUSOLVER_GESVDJ
        ...
}

class CuSolverGeSvd{

    - float* deviceRWork;

    # init(Matrix*)
    # work( )
    # vector<Matrix*> getOutputMatrices();
}

class CuSolverGeSvdJ{

    - float tolerance;
    - int maxSweeps;
    - int econ;
    - gesvdjInfo_t gesvdjParams;
    - cusolverEigMode_t jobZ;

    - printStat();
    # init(Matrix*)
    # work( )
    # vector<Matrix*> getOutputMatrices();
}


class TimeElapsed{
    + int getInitTime()
    + int getWorkingTime()
    + int getFinalizeTime()
    + int getTotalTime()
}

note bottom: Time in milliseconds

class SvdContainer{
    + SvdContainer(SvdEngine*)
    + setMatrix(Matrix*)
    + Matrix*[ ] getOutputMatrices( )
    + TimeElapsed* getTimeElapsed( )
}

SvdContainer ..>  Matrix : use
SvdContainer --> "1" SvdEngine
TimeElapsed "1" <- SvdContainer
SvdEngine -> "*" Matrix
SvdEngine <|-- SvdCudaEngine : extends
SvdCudaEngine <|-- CuSolverGeSvdJ : extends
SvdCudaEngine <|-- CuSolverGeSvd : extends

hide SvdEngine fields
hide TimeElapsed fields
hide SvdContainer fields
hide SvdEngineType methods

@enduml